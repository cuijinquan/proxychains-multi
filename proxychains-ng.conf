[global]
# Chain type:
#
# dynamic - Each connection will be done via chained proxies
# all proxies chained in the order as they appear in the list
# at least one proxy must be online to play in chain
# (dead proxies are skipped)
# otherwise EINTR is returned to the app
#
# strict - Each connection will be done via chained proxies
# all proxies chained in the order as they appear in the list
# all proxies must be online to play in chain
# otherwise EINTR is returned to the app
#
# random - Each connection will be done via random proxy
# (or proxy chain, see  chain_len) from the list.
# this option is good to test your IDS :)
chain_type dynamic

# Maximum length of randomly generated chain
chain_len 1

# Quiet mode (no output from library)
quiet_mode no

# Proxy DNS requests - no leak for DNS data
proxy_dns no

# Some timeouts in milliseconds
tcp_connect_timeout 1000
tcp_read_timeout 4000

# Chain definition begins by signature
#   [chain "name"]
# where "name" can be any name. You can omit name to define unnamed chain.
#[chain "chain name"]

# Chain definition consists of overriden parameters, proxies and filters.
# These parameters can be overriden from global values:
#   chain_type
#   chain_len
#   tcp_connect_timeout
#   tcp_read_timeout

# Proxy entry has following format:
#   proxy   <type>  <host:port>         <user>  <pass>
#
# Supported proxy types are http, socks4, socks5. User and pass fields are
# optional. Auth types supported: "basic" (http), "user/pass" (socks).
#
# If no proxies are defined in current chain then direct connection is
# established.
#
# Examples:
#   proxy   socks5  192.168.67.78:1080  "lamer" "secret"
#   proxy   http    192.168.89.3:8080   "justu" "hidden"
#   proxy   socks4  192.168.1.49:1080
#   proxy   http    192.168.39.93:8080    

# filter format:
#   filter  action  destinations
#
# Filter actions:
#   accept - accept connection and try to apply current chain
#   refuse - refuse connection (ECONNREFUSED error is returned to calling application)
#   skip - skip this chain and proceed by next one
#
# Destination could be IP address in CIDR notation and/or port number prefixed
# by colon. Zero port matches any port number.
#
# Multiple destinations should be separated by spaces.
#
# Filters are checked in order of appearance. If no filter was matched then
# "skip" action is assumed and next chain is checked. If there are no more
# chains defined then direct connection is established.
#
# Examples:
#   filter skip 127.0.0.0/8 192.168.0.1
#   filter reject 192.168.0.2:80
#   filter accept :80 :443
#   filter reject :0
